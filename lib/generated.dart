// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `android.webkit.WebView$FindListener`
class WebView_FindListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebView_FindListener> $type;

  @_$jni.internal
  WebView_FindListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/webkit/WebView$FindListener');

  /// The type which includes information such as the signature of this class.
  static const type = $WebView_FindListener$Type();
  static final _id_onFindResultReceived = _class.instanceMethodId(
    r'onFindResultReceived',
    r'(IIZ)V',
  );

  static final _onFindResultReceived = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int, int)>();

  /// from: `public abstract void onFindResultReceived(int i, int i1, boolean z)`
  void onFindResultReceived(
    int i,
    int i1,
    bool z,
  ) {
    _onFindResultReceived(reference.pointer,
            _id_onFindResultReceived as _$jni.JMethodIDPtr, i, i1, z ? 1 : 0)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $WebView_FindListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onFindResultReceived(IIZ)V') {
        _$impls[$p]!.onFindResultReceived(
          $a[0]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[1]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[2]
              .as(const _$jni.JBooleanType(), releaseOriginal: true)
              .booleanValue(releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $WebView_FindListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.webkit.WebView$FindListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onFindResultReceived$async) r'onFindResultReceived(IIZ)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory WebView_FindListener.implement(
    $WebView_FindListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return WebView_FindListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $WebView_FindListener {
  factory $WebView_FindListener({
    required void Function(int i, int i1, bool z) onFindResultReceived,
    bool onFindResultReceived$async,
  }) = _$WebView_FindListener;

  void onFindResultReceived(int i, int i1, bool z);
  bool get onFindResultReceived$async => false;
}

final class _$WebView_FindListener with $WebView_FindListener {
  _$WebView_FindListener({
    required void Function(int i, int i1, bool z) onFindResultReceived,
    this.onFindResultReceived$async = false,
  }) : _onFindResultReceived = onFindResultReceived;

  final void Function(int i, int i1, bool z) _onFindResultReceived;
  final bool onFindResultReceived$async;

  void onFindResultReceived(int i, int i1, bool z) {
    return _onFindResultReceived(i, i1, z);
  }
}

final class $WebView_FindListener$Type
    extends _$jni.JObjType<WebView_FindListener> {
  @_$jni.internal
  const $WebView_FindListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/webkit/WebView$FindListener;';

  @_$jni.internal
  @_$core.override
  WebView_FindListener fromReference(_$jni.JReference reference) =>
      WebView_FindListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebView_FindListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebView_FindListener$Type) &&
        other is $WebView_FindListener$Type;
  }
}

/// from: `android.webkit.WebView$HitTestResult`
class WebView_HitTestResult extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebView_HitTestResult> $type;

  @_$jni.internal
  WebView_HitTestResult.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/webkit/WebView$HitTestResult');

  /// The type which includes information such as the signature of this class.
  static const type = $WebView_HitTestResult$Type();

  /// from: `static public final int ANCHOR_TYPE`
  static const ANCHOR_TYPE = 1;

  /// from: `static public final int EDIT_TEXT_TYPE`
  static const EDIT_TEXT_TYPE = 9;

  /// from: `static public final int EMAIL_TYPE`
  static const EMAIL_TYPE = 4;

  /// from: `static public final int GEO_TYPE`
  static const GEO_TYPE = 3;

  /// from: `static public final int IMAGE_ANCHOR_TYPE`
  static const IMAGE_ANCHOR_TYPE = 6;

  /// from: `static public final int IMAGE_TYPE`
  static const IMAGE_TYPE = 5;

  /// from: `static public final int PHONE_TYPE`
  static const PHONE_TYPE = 2;

  /// from: `static public final int SRC_ANCHOR_TYPE`
  static const SRC_ANCHOR_TYPE = 7;

  /// from: `static public final int SRC_IMAGE_ANCHOR_TYPE`
  static const SRC_IMAGE_ANCHOR_TYPE = 8;

  /// from: `static public final int UNKNOWN_TYPE`
  static const UNKNOWN_TYPE = 0;
  static final _id_getType = _class.instanceMethodId(
    r'getType',
    r'()I',
  );

  static final _getType = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getType()`
  int getType() {
    return _getType(reference.pointer, _id_getType as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getExtra = _class.instanceMethodId(
    r'getExtra',
    r'()Ljava/lang/String;',
  );

  static final _getExtra = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getExtra()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getExtra() {
    return _getExtra(reference.pointer, _id_getExtra as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }
}

final class $WebView_HitTestResult$Type
    extends _$jni.JObjType<WebView_HitTestResult> {
  @_$jni.internal
  const $WebView_HitTestResult$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/webkit/WebView$HitTestResult;';

  @_$jni.internal
  @_$core.override
  WebView_HitTestResult fromReference(_$jni.JReference reference) =>
      WebView_HitTestResult.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebView_HitTestResult$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebView_HitTestResult$Type) &&
        other is $WebView_HitTestResult$Type;
  }
}

/// from: `android.webkit.WebView$PictureListener`
class WebView_PictureListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebView_PictureListener> $type;

  @_$jni.internal
  WebView_PictureListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/webkit/WebView$PictureListener');

  /// The type which includes information such as the signature of this class.
  static const type = $WebView_PictureListener$Type();
  static final _id_onNewPicture = _class.instanceMethodId(
    r'onNewPicture',
    r'(Landroid/webkit/WebView;Landroid/graphics/Picture;)V',
  );

  static final _onNewPicture = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onNewPicture(android.webkit.WebView webView, android.graphics.Picture picture)`
  void onNewPicture(
    WebView webView,
    _$jni.JObject picture,
  ) {
    _onNewPicture(reference.pointer, _id_onNewPicture as _$jni.JMethodIDPtr,
            webView.reference.pointer, picture.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $WebView_PictureListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'onNewPicture(Landroid/webkit/WebView;Landroid/graphics/Picture;)V') {
        _$impls[$p]!.onNewPicture(
          $a[0].as(const $WebView$Type(), releaseOriginal: true),
          $a[1].as(const _$jni.JObjectType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $WebView_PictureListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.webkit.WebView$PictureListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onNewPicture$async)
          r'onNewPicture(Landroid/webkit/WebView;Landroid/graphics/Picture;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory WebView_PictureListener.implement(
    $WebView_PictureListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return WebView_PictureListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $WebView_PictureListener {
  factory $WebView_PictureListener({
    required void Function(WebView webView, _$jni.JObject picture) onNewPicture,
    bool onNewPicture$async,
  }) = _$WebView_PictureListener;

  void onNewPicture(WebView webView, _$jni.JObject picture);
  bool get onNewPicture$async => false;
}

final class _$WebView_PictureListener with $WebView_PictureListener {
  _$WebView_PictureListener({
    required void Function(WebView webView, _$jni.JObject picture) onNewPicture,
    this.onNewPicture$async = false,
  }) : _onNewPicture = onNewPicture;

  final void Function(WebView webView, _$jni.JObject picture) _onNewPicture;
  final bool onNewPicture$async;

  void onNewPicture(WebView webView, _$jni.JObject picture) {
    return _onNewPicture(webView, picture);
  }
}

final class $WebView_PictureListener$Type
    extends _$jni.JObjType<WebView_PictureListener> {
  @_$jni.internal
  const $WebView_PictureListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/webkit/WebView$PictureListener;';

  @_$jni.internal
  @_$core.override
  WebView_PictureListener fromReference(_$jni.JReference reference) =>
      WebView_PictureListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebView_PictureListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebView_PictureListener$Type) &&
        other is $WebView_PictureListener$Type;
  }
}

/// from: `android.webkit.WebView$VisualStateCallback`
class WebView_VisualStateCallback extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebView_VisualStateCallback> $type;

  @_$jni.internal
  WebView_VisualStateCallback.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/webkit/WebView$VisualStateCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $WebView_VisualStateCallback$Type();
  static final _id_onComplete = _class.instanceMethodId(
    r'onComplete',
    r'(J)V',
  );

  static final _onComplete = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int64,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void onComplete(long j)`
  void onComplete(
    int j,
  ) {
    _onComplete(reference.pointer, _id_onComplete as _$jni.JMethodIDPtr, j)
        .check();
  }
}

final class $WebView_VisualStateCallback$Type
    extends _$jni.JObjType<WebView_VisualStateCallback> {
  @_$jni.internal
  const $WebView_VisualStateCallback$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/webkit/WebView$VisualStateCallback;';

  @_$jni.internal
  @_$core.override
  WebView_VisualStateCallback fromReference(_$jni.JReference reference) =>
      WebView_VisualStateCallback.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebView_VisualStateCallback$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebView_VisualStateCallback$Type) &&
        other is $WebView_VisualStateCallback$Type;
  }
}

/// from: `android.webkit.WebView$WebViewTransport`
class WebView_WebViewTransport extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebView_WebViewTransport> $type;

  @_$jni.internal
  WebView_WebViewTransport.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/webkit/WebView$WebViewTransport');

  /// The type which includes information such as the signature of this class.
  static const type = $WebView_WebViewTransport$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/webkit/WebView;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.webkit.WebView webView)`
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView_WebViewTransport(
    WebView webView,
  ) {
    return WebView_WebViewTransport.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            webView.reference.pointer)
        .reference);
  }

  static final _id_setWebView = _class.instanceMethodId(
    r'setWebView',
    r'(Landroid/webkit/WebView;)V',
  );

  static final _setWebView = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setWebView(android.webkit.WebView webView)`
  void setWebView(
    WebView webView,
  ) {
    _setWebView(reference.pointer, _id_setWebView as _$jni.JMethodIDPtr,
            webView.reference.pointer)
        .check();
  }

  static final _id_getWebView = _class.instanceMethodId(
    r'getWebView',
    r'()Landroid/webkit/WebView;',
  );

  static final _getWebView = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.webkit.WebView getWebView()`
  /// The returned object must be released after use, by calling the [release] method.
  WebView getWebView() {
    return _getWebView(reference.pointer, _id_getWebView as _$jni.JMethodIDPtr)
        .object(const $WebView$Type());
  }
}

final class $WebView_WebViewTransport$Type
    extends _$jni.JObjType<WebView_WebViewTransport> {
  @_$jni.internal
  const $WebView_WebViewTransport$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/webkit/WebView$WebViewTransport;';

  @_$jni.internal
  @_$core.override
  WebView_WebViewTransport fromReference(_$jni.JReference reference) =>
      WebView_WebViewTransport.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebView_WebViewTransport$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebView_WebViewTransport$Type) &&
        other is $WebView_WebViewTransport$Type;
  }
}

/// from: `android.webkit.WebView`
class WebView extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebView> $type;

  @_$jni.internal
  WebView.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(r'android/webkit/WebView');

  /// The type which includes information such as the signature of this class.
  static const type = $WebView$Type();

  /// from: `static public final int RENDERER_PRIORITY_BOUND`
  static const RENDERER_PRIORITY_BOUND = 1;

  /// from: `static public final int RENDERER_PRIORITY_IMPORTANT`
  static const RENDERER_PRIORITY_IMPORTANT = 2;

  /// from: `static public final int RENDERER_PRIORITY_WAIVED`
  static const RENDERER_PRIORITY_WAIVED = 0;
  static final _id_SCHEME_GEO = _class.staticFieldId(
    r'SCHEME_GEO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SCHEME_GEO`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SCHEME_GEO =>
      _id_SCHEME_GEO.get(_class, const _$jni.JStringType());

  static final _id_SCHEME_MAILTO = _class.staticFieldId(
    r'SCHEME_MAILTO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SCHEME_MAILTO`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SCHEME_MAILTO =>
      _id_SCHEME_MAILTO.get(_class, const _$jni.JStringType());

  static final _id_SCHEME_TEL = _class.staticFieldId(
    r'SCHEME_TEL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SCHEME_TEL`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SCHEME_TEL =>
      _id_SCHEME_TEL.get(_class, const _$jni.JStringType());

  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView(
    _$jni.JObject context,
  ) {
    return WebView.fromReference(_new$(_class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr, context.reference.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;)V',
  );

  static final _new$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView.new$1(
    _$jni.JObject context,
    _$jni.JObject attributeSet,
  ) {
    return WebView.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as _$jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer)
        .reference);
  }

  static final _id_new$2 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;I)V',
  );

  static final _new$2 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView.new$2(
    _$jni.JObject context,
    _$jni.JObject attributeSet,
    int i,
  ) {
    return WebView.fromReference(_new$2(
            _class.reference.pointer,
            _id_new$2 as _$jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer,
            i)
        .reference);
  }

  static final _id_new$3 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;II)V',
  );

  static final _new$3 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int)>();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView.new$3(
    _$jni.JObject context,
    _$jni.JObject attributeSet,
    int i,
    int i1,
  ) {
    return WebView.fromReference(_new$3(
            _class.reference.pointer,
            _id_new$3 as _$jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer,
            i,
            i1)
        .reference);
  }

  static final _id_new$4 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;IZ)V',
  );

  static final _new$4 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int)>();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet, int i, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView.new$4(
    _$jni.JObject context,
    _$jni.JObject attributeSet,
    int i,
    bool z,
  ) {
    return WebView.fromReference(_new$4(
            _class.reference.pointer,
            _id_new$4 as _$jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer,
            i,
            z ? 1 : 0)
        .reference);
  }

  static final _id_setHorizontalScrollbarOverlay = _class.instanceMethodId(
    r'setHorizontalScrollbarOverlay',
    r'(Z)V',
  );

  static final _setHorizontalScrollbarOverlay =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setHorizontalScrollbarOverlay(boolean z)`
  void setHorizontalScrollbarOverlay(
    bool z,
  ) {
    _setHorizontalScrollbarOverlay(reference.pointer,
            _id_setHorizontalScrollbarOverlay as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setVerticalScrollbarOverlay = _class.instanceMethodId(
    r'setVerticalScrollbarOverlay',
    r'(Z)V',
  );

  static final _setVerticalScrollbarOverlay =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setVerticalScrollbarOverlay(boolean z)`
  void setVerticalScrollbarOverlay(
    bool z,
  ) {
    _setVerticalScrollbarOverlay(reference.pointer,
            _id_setVerticalScrollbarOverlay as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_overlayHorizontalScrollbar = _class.instanceMethodId(
    r'overlayHorizontalScrollbar',
    r'()Z',
  );

  static final _overlayHorizontalScrollbar =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean overlayHorizontalScrollbar()`
  bool overlayHorizontalScrollbar() {
    return _overlayHorizontalScrollbar(reference.pointer,
            _id_overlayHorizontalScrollbar as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_overlayVerticalScrollbar = _class.instanceMethodId(
    r'overlayVerticalScrollbar',
    r'()Z',
  );

  static final _overlayVerticalScrollbar = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean overlayVerticalScrollbar()`
  bool overlayVerticalScrollbar() {
    return _overlayVerticalScrollbar(reference.pointer,
            _id_overlayVerticalScrollbar as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getCertificate = _class.instanceMethodId(
    r'getCertificate',
    r'()Landroid/net/http/SslCertificate;',
  );

  static final _getCertificate = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.net.http.SslCertificate getCertificate()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getCertificate() {
    return _getCertificate(
            reference.pointer, _id_getCertificate as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_setCertificate = _class.instanceMethodId(
    r'setCertificate',
    r'(Landroid/net/http/SslCertificate;)V',
  );

  static final _setCertificate = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setCertificate(android.net.http.SslCertificate sslCertificate)`
  void setCertificate(
    _$jni.JObject sslCertificate,
  ) {
    _setCertificate(reference.pointer, _id_setCertificate as _$jni.JMethodIDPtr,
            sslCertificate.reference.pointer)
        .check();
  }

  static final _id_savePassword = _class.instanceMethodId(
    r'savePassword',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _savePassword = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void savePassword(java.lang.String string, java.lang.String string1, java.lang.String string2)`
  void savePassword(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
  ) {
    _savePassword(
            reference.pointer,
            _id_savePassword as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer)
        .check();
  }

  static final _id_setHttpAuthUsernamePassword = _class.instanceMethodId(
    r'setHttpAuthUsernamePassword',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _setHttpAuthUsernamePassword =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setHttpAuthUsernamePassword(java.lang.String string, java.lang.String string1, java.lang.String string2, java.lang.String string3)`
  void setHttpAuthUsernamePassword(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    _$jni.JString string3,
  ) {
    _setHttpAuthUsernamePassword(
            reference.pointer,
            _id_setHttpAuthUsernamePassword as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            string3.reference.pointer)
        .check();
  }

  static final _id_getHttpAuthUsernamePassword = _class.instanceMethodId(
    r'getHttpAuthUsernamePassword',
    r'(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;',
  );

  static final _getHttpAuthUsernamePassword =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.lang.String[] getHttpAuthUsernamePassword(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.JString> getHttpAuthUsernamePassword(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    return _getHttpAuthUsernamePassword(
            reference.pointer,
            _id_getHttpAuthUsernamePassword as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .object(const _$jni.JArrayType(_$jni.JStringType()));
  }

  static final _id_destroy = _class.instanceMethodId(
    r'destroy',
    r'()V',
  );

  static final _destroy = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void destroy()`
  void destroy() {
    _destroy(reference.pointer, _id_destroy as _$jni.JMethodIDPtr).check();
  }

  static final _id_setNetworkAvailable = _class.instanceMethodId(
    r'setNetworkAvailable',
    r'(Z)V',
  );

  static final _setNetworkAvailable = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setNetworkAvailable(boolean z)`
  void setNetworkAvailable(
    bool z,
  ) {
    _setNetworkAvailable(reference.pointer,
            _id_setNetworkAvailable as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_saveState = _class.instanceMethodId(
    r'saveState',
    r'(Landroid/os/Bundle;)Landroid/webkit/WebBackForwardList;',
  );

  static final _saveState = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.webkit.WebBackForwardList saveState(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject saveState(
    _$jni.JObject bundle,
  ) {
    return _saveState(reference.pointer, _id_saveState as _$jni.JMethodIDPtr,
            bundle.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_restoreState = _class.instanceMethodId(
    r'restoreState',
    r'(Landroid/os/Bundle;)Landroid/webkit/WebBackForwardList;',
  );

  static final _restoreState = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.webkit.WebBackForwardList restoreState(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject restoreState(
    _$jni.JObject bundle,
  ) {
    return _restoreState(reference.pointer,
            _id_restoreState as _$jni.JMethodIDPtr, bundle.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_loadUrl = _class.instanceMethodId(
    r'loadUrl',
    r'(Ljava/lang/String;Ljava/util/Map;)V',
  );

  static final _loadUrl = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void loadUrl(java.lang.String string, java.util.Map map)`
  void loadUrl(
    _$jni.JString string,
    _$jni.JMap<_$jni.JString, _$jni.JString> map,
  ) {
    _loadUrl(reference.pointer, _id_loadUrl as _$jni.JMethodIDPtr,
            string.reference.pointer, map.reference.pointer)
        .check();
  }

  static final _id_loadUrl$1 = _class.instanceMethodId(
    r'loadUrl',
    r'(Ljava/lang/String;)V',
  );

  static final _loadUrl$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void loadUrl(java.lang.String string)`
  void loadUrl$1(
    _$jni.JString string,
  ) {
    _loadUrl$1(reference.pointer, _id_loadUrl$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_postUrl = _class.instanceMethodId(
    r'postUrl',
    r'(Ljava/lang/String;[B)V',
  );

  static final _postUrl = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void postUrl(java.lang.String string, byte[] bs)`
  void postUrl(
    _$jni.JString string,
    _$jni.JArray<_$jni.jbyte> bs,
  ) {
    _postUrl(reference.pointer, _id_postUrl as _$jni.JMethodIDPtr,
            string.reference.pointer, bs.reference.pointer)
        .check();
  }

  static final _id_loadData = _class.instanceMethodId(
    r'loadData',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _loadData = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void loadData(java.lang.String string, java.lang.String string1, java.lang.String string2)`
  void loadData(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
  ) {
    _loadData(
            reference.pointer,
            _id_loadData as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer)
        .check();
  }

  static final _id_loadDataWithBaseURL = _class.instanceMethodId(
    r'loadDataWithBaseURL',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _loadDataWithBaseURL = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void loadDataWithBaseURL(java.lang.String string, java.lang.String string1, java.lang.String string2, java.lang.String string3, java.lang.String string4)`
  void loadDataWithBaseURL(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    _$jni.JString string3,
    _$jni.JString string4,
  ) {
    _loadDataWithBaseURL(
            reference.pointer,
            _id_loadDataWithBaseURL as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            string3.reference.pointer,
            string4.reference.pointer)
        .check();
  }

  static final _id_evaluateJavascript = _class.instanceMethodId(
    r'evaluateJavascript',
    r'(Ljava/lang/String;Landroid/webkit/ValueCallback;)V',
  );

  static final _evaluateJavascript = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void evaluateJavascript(java.lang.String string, android.webkit.ValueCallback valueCallback)`
  void evaluateJavascript(
    _$jni.JString string,
    _$jni.JObject valueCallback,
  ) {
    _evaluateJavascript(
            reference.pointer,
            _id_evaluateJavascript as _$jni.JMethodIDPtr,
            string.reference.pointer,
            valueCallback.reference.pointer)
        .check();
  }

  static final _id_saveWebArchive = _class.instanceMethodId(
    r'saveWebArchive',
    r'(Ljava/lang/String;)V',
  );

  static final _saveWebArchive = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void saveWebArchive(java.lang.String string)`
  void saveWebArchive(
    _$jni.JString string,
  ) {
    _saveWebArchive(reference.pointer, _id_saveWebArchive as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_saveWebArchive$1 = _class.instanceMethodId(
    r'saveWebArchive',
    r'(Ljava/lang/String;ZLandroid/webkit/ValueCallback;)V',
  );

  static final _saveWebArchive$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void saveWebArchive(java.lang.String string, boolean z, android.webkit.ValueCallback valueCallback)`
  void saveWebArchive$1(
    _$jni.JString string,
    bool z,
    _$jni.JObject valueCallback,
  ) {
    _saveWebArchive$1(
            reference.pointer,
            _id_saveWebArchive$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            z ? 1 : 0,
            valueCallback.reference.pointer)
        .check();
  }

  static final _id_stopLoading = _class.instanceMethodId(
    r'stopLoading',
    r'()V',
  );

  static final _stopLoading = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void stopLoading()`
  void stopLoading() {
    _stopLoading(reference.pointer, _id_stopLoading as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_reload = _class.instanceMethodId(
    r'reload',
    r'()V',
  );

  static final _reload = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void reload()`
  void reload() {
    _reload(reference.pointer, _id_reload as _$jni.JMethodIDPtr).check();
  }

  static final _id_canGoBack = _class.instanceMethodId(
    r'canGoBack',
    r'()Z',
  );

  static final _canGoBack = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean canGoBack()`
  bool canGoBack() {
    return _canGoBack(reference.pointer, _id_canGoBack as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_goBack = _class.instanceMethodId(
    r'goBack',
    r'()V',
  );

  static final _goBack = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void goBack()`
  void goBack() {
    _goBack(reference.pointer, _id_goBack as _$jni.JMethodIDPtr).check();
  }

  static final _id_canGoForward = _class.instanceMethodId(
    r'canGoForward',
    r'()Z',
  );

  static final _canGoForward = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean canGoForward()`
  bool canGoForward() {
    return _canGoForward(
            reference.pointer, _id_canGoForward as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_goForward = _class.instanceMethodId(
    r'goForward',
    r'()V',
  );

  static final _goForward = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void goForward()`
  void goForward() {
    _goForward(reference.pointer, _id_goForward as _$jni.JMethodIDPtr).check();
  }

  static final _id_canGoBackOrForward = _class.instanceMethodId(
    r'canGoBackOrForward',
    r'(I)Z',
  );

  static final _canGoBackOrForward = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni
                      .VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public boolean canGoBackOrForward(int i)`
  bool canGoBackOrForward(
    int i,
  ) {
    return _canGoBackOrForward(
            reference.pointer, _id_canGoBackOrForward as _$jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_goBackOrForward = _class.instanceMethodId(
    r'goBackOrForward',
    r'(I)V',
  );

  static final _goBackOrForward = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void goBackOrForward(int i)`
  void goBackOrForward(
    int i,
  ) {
    _goBackOrForward(
            reference.pointer, _id_goBackOrForward as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_isPrivateBrowsingEnabled = _class.instanceMethodId(
    r'isPrivateBrowsingEnabled',
    r'()Z',
  );

  static final _isPrivateBrowsingEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isPrivateBrowsingEnabled()`
  bool isPrivateBrowsingEnabled() {
    return _isPrivateBrowsingEnabled(reference.pointer,
            _id_isPrivateBrowsingEnabled as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_pageUp = _class.instanceMethodId(
    r'pageUp',
    r'(Z)Z',
  );

  static final _pageUp = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni
                      .VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public boolean pageUp(boolean z)`
  bool pageUp(
    bool z,
  ) {
    return _pageUp(
            reference.pointer, _id_pageUp as _$jni.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_pageDown = _class.instanceMethodId(
    r'pageDown',
    r'(Z)Z',
  );

  static final _pageDown = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni
                      .VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public boolean pageDown(boolean z)`
  bool pageDown(
    bool z,
  ) {
    return _pageDown(
            reference.pointer, _id_pageDown as _$jni.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_postVisualStateCallback = _class.instanceMethodId(
    r'postVisualStateCallback',
    r'(JLandroid/webkit/WebView$VisualStateCallback;)V',
  );

  static final _postVisualStateCallback = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int64, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void postVisualStateCallback(long j, android.webkit.WebView$VisualStateCallback visualStateCallback)`
  void postVisualStateCallback(
    int j,
    WebView_VisualStateCallback visualStateCallback,
  ) {
    _postVisualStateCallback(
            reference.pointer,
            _id_postVisualStateCallback as _$jni.JMethodIDPtr,
            j,
            visualStateCallback.reference.pointer)
        .check();
  }

  static final _id_clearView = _class.instanceMethodId(
    r'clearView',
    r'()V',
  );

  static final _clearView = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void clearView()`
  void clearView() {
    _clearView(reference.pointer, _id_clearView as _$jni.JMethodIDPtr).check();
  }

  static final _id_capturePicture = _class.instanceMethodId(
    r'capturePicture',
    r'()Landroid/graphics/Picture;',
  );

  static final _capturePicture = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.Picture capturePicture()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject capturePicture() {
    return _capturePicture(
            reference.pointer, _id_capturePicture as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_createPrintDocumentAdapter = _class.instanceMethodId(
    r'createPrintDocumentAdapter',
    r'()Landroid/print/PrintDocumentAdapter;',
  );

  static final _createPrintDocumentAdapter =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public android.print.PrintDocumentAdapter createPrintDocumentAdapter()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject createPrintDocumentAdapter() {
    return _createPrintDocumentAdapter(reference.pointer,
            _id_createPrintDocumentAdapter as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_createPrintDocumentAdapter$1 = _class.instanceMethodId(
    r'createPrintDocumentAdapter',
    r'(Ljava/lang/String;)Landroid/print/PrintDocumentAdapter;',
  );

  static final _createPrintDocumentAdapter$1 =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.print.PrintDocumentAdapter createPrintDocumentAdapter(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject createPrintDocumentAdapter$1(
    _$jni.JString string,
  ) {
    return _createPrintDocumentAdapter$1(
            reference.pointer,
            _id_createPrintDocumentAdapter$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getScale = _class.instanceMethodId(
    r'getScale',
    r'()F',
  );

  static final _getScale = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public float getScale()`
  double getScale() {
    return _getScale(reference.pointer, _id_getScale as _$jni.JMethodIDPtr)
        .float;
  }

  static final _id_setInitialScale = _class.instanceMethodId(
    r'setInitialScale',
    r'(I)V',
  );

  static final _setInitialScale = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setInitialScale(int i)`
  void setInitialScale(
    int i,
  ) {
    _setInitialScale(
            reference.pointer, _id_setInitialScale as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_invokeZoomPicker = _class.instanceMethodId(
    r'invokeZoomPicker',
    r'()V',
  );

  static final _invokeZoomPicker = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void invokeZoomPicker()`
  void invokeZoomPicker() {
    _invokeZoomPicker(
            reference.pointer, _id_invokeZoomPicker as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_getHitTestResult = _class.instanceMethodId(
    r'getHitTestResult',
    r'()Landroid/webkit/WebView$HitTestResult;',
  );

  static final _getHitTestResult = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.webkit.WebView$HitTestResult getHitTestResult()`
  /// The returned object must be released after use, by calling the [release] method.
  WebView_HitTestResult getHitTestResult() {
    return _getHitTestResult(
            reference.pointer, _id_getHitTestResult as _$jni.JMethodIDPtr)
        .object(const $WebView_HitTestResult$Type());
  }

  static final _id_requestFocusNodeHref = _class.instanceMethodId(
    r'requestFocusNodeHref',
    r'(Landroid/os/Message;)V',
  );

  static final _requestFocusNodeHref = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void requestFocusNodeHref(android.os.Message message)`
  void requestFocusNodeHref(
    _$jni.JObject message,
  ) {
    _requestFocusNodeHref(
            reference.pointer,
            _id_requestFocusNodeHref as _$jni.JMethodIDPtr,
            message.reference.pointer)
        .check();
  }

  static final _id_requestImageRef = _class.instanceMethodId(
    r'requestImageRef',
    r'(Landroid/os/Message;)V',
  );

  static final _requestImageRef = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void requestImageRef(android.os.Message message)`
  void requestImageRef(
    _$jni.JObject message,
  ) {
    _requestImageRef(
            reference.pointer,
            _id_requestImageRef as _$jni.JMethodIDPtr,
            message.reference.pointer)
        .check();
  }

  static final _id_getUrl = _class.instanceMethodId(
    r'getUrl',
    r'()Ljava/lang/String;',
  );

  static final _getUrl = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getUrl()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getUrl() {
    return _getUrl(reference.pointer, _id_getUrl as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getOriginalUrl = _class.instanceMethodId(
    r'getOriginalUrl',
    r'()Ljava/lang/String;',
  );

  static final _getOriginalUrl = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getOriginalUrl()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getOriginalUrl() {
    return _getOriginalUrl(
            reference.pointer, _id_getOriginalUrl as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getTitle = _class.instanceMethodId(
    r'getTitle',
    r'()Ljava/lang/String;',
  );

  static final _getTitle = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getTitle()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getTitle() {
    return _getTitle(reference.pointer, _id_getTitle as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getFavicon = _class.instanceMethodId(
    r'getFavicon',
    r'()Landroid/graphics/Bitmap;',
  );

  static final _getFavicon = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.Bitmap getFavicon()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getFavicon() {
    return _getFavicon(reference.pointer, _id_getFavicon as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getProgress = _class.instanceMethodId(
    r'getProgress',
    r'()I',
  );

  static final _getProgress = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getProgress()`
  int getProgress() {
    return _getProgress(
            reference.pointer, _id_getProgress as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getContentHeight = _class.instanceMethodId(
    r'getContentHeight',
    r'()I',
  );

  static final _getContentHeight = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getContentHeight()`
  int getContentHeight() {
    return _getContentHeight(
            reference.pointer, _id_getContentHeight as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_pauseTimers = _class.instanceMethodId(
    r'pauseTimers',
    r'()V',
  );

  static final _pauseTimers = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void pauseTimers()`
  void pauseTimers() {
    _pauseTimers(reference.pointer, _id_pauseTimers as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_resumeTimers = _class.instanceMethodId(
    r'resumeTimers',
    r'()V',
  );

  static final _resumeTimers = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void resumeTimers()`
  void resumeTimers() {
    _resumeTimers(reference.pointer, _id_resumeTimers as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_onPause = _class.instanceMethodId(
    r'onPause',
    r'()V',
  );

  static final _onPause = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onPause()`
  void onPause() {
    _onPause(reference.pointer, _id_onPause as _$jni.JMethodIDPtr).check();
  }

  static final _id_onResume = _class.instanceMethodId(
    r'onResume',
    r'()V',
  );

  static final _onResume = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onResume()`
  void onResume() {
    _onResume(reference.pointer, _id_onResume as _$jni.JMethodIDPtr).check();
  }

  static final _id_freeMemory = _class.instanceMethodId(
    r'freeMemory',
    r'()V',
  );

  static final _freeMemory = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void freeMemory()`
  void freeMemory() {
    _freeMemory(reference.pointer, _id_freeMemory as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_clearCache = _class.instanceMethodId(
    r'clearCache',
    r'(Z)V',
  );

  static final _clearCache = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void clearCache(boolean z)`
  void clearCache(
    bool z,
  ) {
    _clearCache(
            reference.pointer, _id_clearCache as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_clearFormData = _class.instanceMethodId(
    r'clearFormData',
    r'()V',
  );

  static final _clearFormData = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void clearFormData()`
  void clearFormData() {
    _clearFormData(reference.pointer, _id_clearFormData as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_clearHistory = _class.instanceMethodId(
    r'clearHistory',
    r'()V',
  );

  static final _clearHistory = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void clearHistory()`
  void clearHistory() {
    _clearHistory(reference.pointer, _id_clearHistory as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_clearSslPreferences = _class.instanceMethodId(
    r'clearSslPreferences',
    r'()V',
  );

  static final _clearSslPreferences = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void clearSslPreferences()`
  void clearSslPreferences() {
    _clearSslPreferences(
            reference.pointer, _id_clearSslPreferences as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_clearClientCertPreferences = _class.staticMethodId(
    r'clearClientCertPreferences',
    r'(Ljava/lang/Runnable;)V',
  );

  static final _clearClientCertPreferences =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void clearClientCertPreferences(java.lang.Runnable runnable)`
  static void clearClientCertPreferences(
    _$jni.JObject runnable,
  ) {
    _clearClientCertPreferences(
            _class.reference.pointer,
            _id_clearClientCertPreferences as _$jni.JMethodIDPtr,
            runnable.reference.pointer)
        .check();
  }

  static final _id_startSafeBrowsing = _class.staticMethodId(
    r'startSafeBrowsing',
    r'(Landroid/content/Context;Landroid/webkit/ValueCallback;)V',
  );

  static final _startSafeBrowsing = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void startSafeBrowsing(android.content.Context context, android.webkit.ValueCallback valueCallback)`
  static void startSafeBrowsing(
    _$jni.JObject context,
    _$jni.JObject valueCallback,
  ) {
    _startSafeBrowsing(
            _class.reference.pointer,
            _id_startSafeBrowsing as _$jni.JMethodIDPtr,
            context.reference.pointer,
            valueCallback.reference.pointer)
        .check();
  }

  static final _id_setSafeBrowsingWhitelist = _class.staticMethodId(
    r'setSafeBrowsingWhitelist',
    r'(Ljava/util/List;Landroid/webkit/ValueCallback;)V',
  );

  static final _setSafeBrowsingWhitelist = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void setSafeBrowsingWhitelist(java.util.List list, android.webkit.ValueCallback valueCallback)`
  static void setSafeBrowsingWhitelist(
    _$jni.JList<_$jni.JString> list,
    _$jni.JObject valueCallback,
  ) {
    _setSafeBrowsingWhitelist(
            _class.reference.pointer,
            _id_setSafeBrowsingWhitelist as _$jni.JMethodIDPtr,
            list.reference.pointer,
            valueCallback.reference.pointer)
        .check();
  }

  static final _id_getSafeBrowsingPrivacyPolicyUrl = _class.staticMethodId(
    r'getSafeBrowsingPrivacyPolicyUrl',
    r'()Landroid/net/Uri;',
  );

  static final _getSafeBrowsingPrivacyPolicyUrl =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `static public android.net.Uri getSafeBrowsingPrivacyPolicyUrl()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getSafeBrowsingPrivacyPolicyUrl() {
    return _getSafeBrowsingPrivacyPolicyUrl(_class.reference.pointer,
            _id_getSafeBrowsingPrivacyPolicyUrl as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_copyBackForwardList = _class.instanceMethodId(
    r'copyBackForwardList',
    r'()Landroid/webkit/WebBackForwardList;',
  );

  static final _copyBackForwardList = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.webkit.WebBackForwardList copyBackForwardList()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject copyBackForwardList() {
    return _copyBackForwardList(
            reference.pointer, _id_copyBackForwardList as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_setFindListener = _class.instanceMethodId(
    r'setFindListener',
    r'(Landroid/webkit/WebView$FindListener;)V',
  );

  static final _setFindListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setFindListener(android.webkit.WebView$FindListener findListener)`
  void setFindListener(
    WebView_FindListener findListener,
  ) {
    _setFindListener(
            reference.pointer,
            _id_setFindListener as _$jni.JMethodIDPtr,
            findListener.reference.pointer)
        .check();
  }

  static final _id_findNext = _class.instanceMethodId(
    r'findNext',
    r'(Z)V',
  );

  static final _findNext = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void findNext(boolean z)`
  void findNext(
    bool z,
  ) {
    _findNext(reference.pointer, _id_findNext as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_findAll = _class.instanceMethodId(
    r'findAll',
    r'(Ljava/lang/String;)I',
  );

  static final _findAll = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public int findAll(java.lang.String string)`
  int findAll(
    _$jni.JString string,
  ) {
    return _findAll(reference.pointer, _id_findAll as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_findAllAsync = _class.instanceMethodId(
    r'findAllAsync',
    r'(Ljava/lang/String;)V',
  );

  static final _findAllAsync = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void findAllAsync(java.lang.String string)`
  void findAllAsync(
    _$jni.JString string,
  ) {
    _findAllAsync(reference.pointer, _id_findAllAsync as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_showFindDialog = _class.instanceMethodId(
    r'showFindDialog',
    r'(Ljava/lang/String;Z)Z',
  );

  static final _showFindDialog = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public boolean showFindDialog(java.lang.String string, boolean z)`
  bool showFindDialog(
    _$jni.JString string,
    bool z,
  ) {
    return _showFindDialog(
            reference.pointer,
            _id_showFindDialog as _$jni.JMethodIDPtr,
            string.reference.pointer,
            z ? 1 : 0)
        .boolean;
  }

  static final _id_findAddress = _class.staticMethodId(
    r'findAddress',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _findAddress = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.lang.String findAddress(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString findAddress(
    _$jni.JString string,
  ) {
    return _findAddress(_class.reference.pointer,
            _id_findAddress as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const _$jni.JStringType());
  }

  static final _id_enableSlowWholeDocumentDraw = _class.staticMethodId(
    r'enableSlowWholeDocumentDraw',
    r'()V',
  );

  static final _enableSlowWholeDocumentDraw =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallStaticVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `static public void enableSlowWholeDocumentDraw()`
  static void enableSlowWholeDocumentDraw() {
    _enableSlowWholeDocumentDraw(_class.reference.pointer,
            _id_enableSlowWholeDocumentDraw as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_clearMatches = _class.instanceMethodId(
    r'clearMatches',
    r'()V',
  );

  static final _clearMatches = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void clearMatches()`
  void clearMatches() {
    _clearMatches(reference.pointer, _id_clearMatches as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_documentHasImages = _class.instanceMethodId(
    r'documentHasImages',
    r'(Landroid/os/Message;)V',
  );

  static final _documentHasImages = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void documentHasImages(android.os.Message message)`
  void documentHasImages(
    _$jni.JObject message,
  ) {
    _documentHasImages(
            reference.pointer,
            _id_documentHasImages as _$jni.JMethodIDPtr,
            message.reference.pointer)
        .check();
  }

  static final _id_setWebViewClient = _class.instanceMethodId(
    r'setWebViewClient',
    r'(Landroid/webkit/WebViewClient;)V',
  );

  static final _setWebViewClient = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setWebViewClient(android.webkit.WebViewClient webViewClient)`
  void setWebViewClient(
    _$jni.JObject webViewClient,
  ) {
    _setWebViewClient(
            reference.pointer,
            _id_setWebViewClient as _$jni.JMethodIDPtr,
            webViewClient.reference.pointer)
        .check();
  }

  static final _id_getWebViewClient = _class.instanceMethodId(
    r'getWebViewClient',
    r'()Landroid/webkit/WebViewClient;',
  );

  static final _getWebViewClient = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.webkit.WebViewClient getWebViewClient()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getWebViewClient() {
    return _getWebViewClient(
            reference.pointer, _id_getWebViewClient as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getWebViewRenderProcess = _class.instanceMethodId(
    r'getWebViewRenderProcess',
    r'()Landroid/webkit/WebViewRenderProcess;',
  );

  static final _getWebViewRenderProcess = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.webkit.WebViewRenderProcess getWebViewRenderProcess()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getWebViewRenderProcess() {
    return _getWebViewRenderProcess(reference.pointer,
            _id_getWebViewRenderProcess as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_setWebViewRenderProcessClient = _class.instanceMethodId(
    r'setWebViewRenderProcessClient',
    r'(Ljava/util/concurrent/Executor;Landroid/webkit/WebViewRenderProcessClient;)V',
  );

  static final _setWebViewRenderProcessClient =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setWebViewRenderProcessClient(java.util.concurrent.Executor executor, android.webkit.WebViewRenderProcessClient webViewRenderProcessClient)`
  void setWebViewRenderProcessClient(
    _$jni.JObject executor,
    _$jni.JObject webViewRenderProcessClient,
  ) {
    _setWebViewRenderProcessClient(
            reference.pointer,
            _id_setWebViewRenderProcessClient as _$jni.JMethodIDPtr,
            executor.reference.pointer,
            webViewRenderProcessClient.reference.pointer)
        .check();
  }

  static final _id_setWebViewRenderProcessClient$1 = _class.instanceMethodId(
    r'setWebViewRenderProcessClient',
    r'(Landroid/webkit/WebViewRenderProcessClient;)V',
  );

  static final _setWebViewRenderProcessClient$1 =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setWebViewRenderProcessClient(android.webkit.WebViewRenderProcessClient webViewRenderProcessClient)`
  void setWebViewRenderProcessClient$1(
    _$jni.JObject webViewRenderProcessClient,
  ) {
    _setWebViewRenderProcessClient$1(
            reference.pointer,
            _id_setWebViewRenderProcessClient$1 as _$jni.JMethodIDPtr,
            webViewRenderProcessClient.reference.pointer)
        .check();
  }

  static final _id_getWebViewRenderProcessClient = _class.instanceMethodId(
    r'getWebViewRenderProcessClient',
    r'()Landroid/webkit/WebViewRenderProcessClient;',
  );

  static final _getWebViewRenderProcessClient =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public android.webkit.WebViewRenderProcessClient getWebViewRenderProcessClient()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getWebViewRenderProcessClient() {
    return _getWebViewRenderProcessClient(reference.pointer,
            _id_getWebViewRenderProcessClient as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_setDownloadListener = _class.instanceMethodId(
    r'setDownloadListener',
    r'(Landroid/webkit/DownloadListener;)V',
  );

  static final _setDownloadListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setDownloadListener(android.webkit.DownloadListener downloadListener)`
  void setDownloadListener(
    _$jni.JObject downloadListener,
  ) {
    _setDownloadListener(
            reference.pointer,
            _id_setDownloadListener as _$jni.JMethodIDPtr,
            downloadListener.reference.pointer)
        .check();
  }

  static final _id_setWebChromeClient = _class.instanceMethodId(
    r'setWebChromeClient',
    r'(Landroid/webkit/WebChromeClient;)V',
  );

  static final _setWebChromeClient = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setWebChromeClient(android.webkit.WebChromeClient webChromeClient)`
  void setWebChromeClient(
    _$jni.JObject webChromeClient,
  ) {
    _setWebChromeClient(
            reference.pointer,
            _id_setWebChromeClient as _$jni.JMethodIDPtr,
            webChromeClient.reference.pointer)
        .check();
  }

  static final _id_getWebChromeClient = _class.instanceMethodId(
    r'getWebChromeClient',
    r'()Landroid/webkit/WebChromeClient;',
  );

  static final _getWebChromeClient = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.webkit.WebChromeClient getWebChromeClient()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getWebChromeClient() {
    return _getWebChromeClient(
            reference.pointer, _id_getWebChromeClient as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_setPictureListener = _class.instanceMethodId(
    r'setPictureListener',
    r'(Landroid/webkit/WebView$PictureListener;)V',
  );

  static final _setPictureListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setPictureListener(android.webkit.WebView$PictureListener pictureListener)`
  void setPictureListener(
    WebView_PictureListener pictureListener,
  ) {
    _setPictureListener(
            reference.pointer,
            _id_setPictureListener as _$jni.JMethodIDPtr,
            pictureListener.reference.pointer)
        .check();
  }

  static final _id_addJavascriptInterface = _class.instanceMethodId(
    r'addJavascriptInterface',
    r'(Ljava/lang/Object;Ljava/lang/String;)V',
  );

  static final _addJavascriptInterface = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addJavascriptInterface(java.lang.Object object, java.lang.String string)`
  void addJavascriptInterface(
    _$jni.JObject object,
    _$jni.JString string,
  ) {
    _addJavascriptInterface(
            reference.pointer,
            _id_addJavascriptInterface as _$jni.JMethodIDPtr,
            object.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _id_removeJavascriptInterface = _class.instanceMethodId(
    r'removeJavascriptInterface',
    r'(Ljava/lang/String;)V',
  );

  static final _removeJavascriptInterface = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeJavascriptInterface(java.lang.String string)`
  void removeJavascriptInterface(
    _$jni.JString string,
  ) {
    _removeJavascriptInterface(
            reference.pointer,
            _id_removeJavascriptInterface as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_createWebMessageChannel = _class.instanceMethodId(
    r'createWebMessageChannel',
    r'()[Landroid/webkit/WebMessagePort;',
  );

  static final _createWebMessageChannel = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.webkit.WebMessagePort[] createWebMessageChannel()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.JObject> createWebMessageChannel() {
    return _createWebMessageChannel(reference.pointer,
            _id_createWebMessageChannel as _$jni.JMethodIDPtr)
        .object(const _$jni.JArrayType(_$jni.JObjectType()));
  }

  static final _id_postWebMessage = _class.instanceMethodId(
    r'postWebMessage',
    r'(Landroid/webkit/WebMessage;Landroid/net/Uri;)V',
  );

  static final _postWebMessage = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void postWebMessage(android.webkit.WebMessage webMessage, android.net.Uri uri)`
  void postWebMessage(
    _$jni.JObject webMessage,
    _$jni.JObject uri,
  ) {
    _postWebMessage(reference.pointer, _id_postWebMessage as _$jni.JMethodIDPtr,
            webMessage.reference.pointer, uri.reference.pointer)
        .check();
  }

  static final _id_getSettings = _class.instanceMethodId(
    r'getSettings',
    r'()Landroid/webkit/WebSettings;',
  );

  static final _getSettings = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.webkit.WebSettings getSettings()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getSettings() {
    return _getSettings(
            reference.pointer, _id_getSettings as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_setWebContentsDebuggingEnabled = _class.staticMethodId(
    r'setWebContentsDebuggingEnabled',
    r'(Z)V',
  );

  static final _setWebContentsDebuggingEnabled =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallStaticVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public void setWebContentsDebuggingEnabled(boolean z)`
  static void setWebContentsDebuggingEnabled(
    bool z,
  ) {
    _setWebContentsDebuggingEnabled(_class.reference.pointer,
            _id_setWebContentsDebuggingEnabled as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setDataDirectorySuffix = _class.staticMethodId(
    r'setDataDirectorySuffix',
    r'(Ljava/lang/String;)V',
  );

  static final _setDataDirectorySuffix = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void setDataDirectorySuffix(java.lang.String string)`
  static void setDataDirectorySuffix(
    _$jni.JString string,
  ) {
    _setDataDirectorySuffix(
            _class.reference.pointer,
            _id_setDataDirectorySuffix as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_disableWebView = _class.staticMethodId(
    r'disableWebView',
    r'()V',
  );

  static final _disableWebView = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public void disableWebView()`
  static void disableWebView() {
    _disableWebView(
            _class.reference.pointer, _id_disableWebView as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_onChildViewAdded = _class.instanceMethodId(
    r'onChildViewAdded',
    r'(Landroid/view/View;Landroid/view/View;)V',
  );

  static final _onChildViewAdded = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onChildViewAdded(android.view.View view, android.view.View view1)`
  void onChildViewAdded(
    _$jni.JObject view,
    _$jni.JObject view1,
  ) {
    _onChildViewAdded(
            reference.pointer,
            _id_onChildViewAdded as _$jni.JMethodIDPtr,
            view.reference.pointer,
            view1.reference.pointer)
        .check();
  }

  static final _id_onChildViewRemoved = _class.instanceMethodId(
    r'onChildViewRemoved',
    r'(Landroid/view/View;Landroid/view/View;)V',
  );

  static final _onChildViewRemoved = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onChildViewRemoved(android.view.View view, android.view.View view1)`
  void onChildViewRemoved(
    _$jni.JObject view,
    _$jni.JObject view1,
  ) {
    _onChildViewRemoved(
            reference.pointer,
            _id_onChildViewRemoved as _$jni.JMethodIDPtr,
            view.reference.pointer,
            view1.reference.pointer)
        .check();
  }

  static final _id_onGlobalFocusChanged = _class.instanceMethodId(
    r'onGlobalFocusChanged',
    r'(Landroid/view/View;Landroid/view/View;)V',
  );

  static final _onGlobalFocusChanged = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onGlobalFocusChanged(android.view.View view, android.view.View view1)`
  void onGlobalFocusChanged(
    _$jni.JObject view,
    _$jni.JObject view1,
  ) {
    _onGlobalFocusChanged(
            reference.pointer,
            _id_onGlobalFocusChanged as _$jni.JMethodIDPtr,
            view.reference.pointer,
            view1.reference.pointer)
        .check();
  }

  static final _id_setMapTrackballToArrowKeys = _class.instanceMethodId(
    r'setMapTrackballToArrowKeys',
    r'(Z)V',
  );

  static final _setMapTrackballToArrowKeys =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setMapTrackballToArrowKeys(boolean z)`
  void setMapTrackballToArrowKeys(
    bool z,
  ) {
    _setMapTrackballToArrowKeys(reference.pointer,
            _id_setMapTrackballToArrowKeys as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_flingScroll = _class.instanceMethodId(
    r'flingScroll',
    r'(II)V',
  );

  static final _flingScroll = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();

  /// from: `public void flingScroll(int i, int i1)`
  void flingScroll(
    int i,
    int i1,
  ) {
    _flingScroll(
            reference.pointer, _id_flingScroll as _$jni.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_canZoomIn = _class.instanceMethodId(
    r'canZoomIn',
    r'()Z',
  );

  static final _canZoomIn = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean canZoomIn()`
  bool canZoomIn() {
    return _canZoomIn(reference.pointer, _id_canZoomIn as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_canZoomOut = _class.instanceMethodId(
    r'canZoomOut',
    r'()Z',
  );

  static final _canZoomOut = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean canZoomOut()`
  bool canZoomOut() {
    return _canZoomOut(reference.pointer, _id_canZoomOut as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_zoomBy = _class.instanceMethodId(
    r'zoomBy',
    r'(F)V',
  );

  static final _zoomBy = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Double,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, double)>();

  /// from: `public void zoomBy(float f)`
  void zoomBy(
    double f,
  ) {
    _zoomBy(reference.pointer, _id_zoomBy as _$jni.JMethodIDPtr, f).check();
  }

  static final _id_zoomIn = _class.instanceMethodId(
    r'zoomIn',
    r'()Z',
  );

  static final _zoomIn = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean zoomIn()`
  bool zoomIn() {
    return _zoomIn(reference.pointer, _id_zoomIn as _$jni.JMethodIDPtr).boolean;
  }

  static final _id_zoomOut = _class.instanceMethodId(
    r'zoomOut',
    r'()Z',
  );

  static final _zoomOut = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean zoomOut()`
  bool zoomOut() {
    return _zoomOut(reference.pointer, _id_zoomOut as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setRendererPriorityPolicy = _class.instanceMethodId(
    r'setRendererPriorityPolicy',
    r'(IZ)V',
  );

  static final _setRendererPriorityPolicy = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();

  /// from: `public void setRendererPriorityPolicy(int i, boolean z)`
  void setRendererPriorityPolicy(
    int i,
    bool z,
  ) {
    _setRendererPriorityPolicy(reference.pointer,
            _id_setRendererPriorityPolicy as _$jni.JMethodIDPtr, i, z ? 1 : 0)
        .check();
  }

  static final _id_getRendererRequestedPriority = _class.instanceMethodId(
    r'getRendererRequestedPriority',
    r'()I',
  );

  static final _getRendererRequestedPriority =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public int getRendererRequestedPriority()`
  int getRendererRequestedPriority() {
    return _getRendererRequestedPriority(reference.pointer,
            _id_getRendererRequestedPriority as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getRendererPriorityWaivedWhenNotVisible =
      _class.instanceMethodId(
    r'getRendererPriorityWaivedWhenNotVisible',
    r'()Z',
  );

  static final _getRendererPriorityWaivedWhenNotVisible =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean getRendererPriorityWaivedWhenNotVisible()`
  bool getRendererPriorityWaivedWhenNotVisible() {
    return _getRendererPriorityWaivedWhenNotVisible(reference.pointer,
            _id_getRendererPriorityWaivedWhenNotVisible as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setTextClassifier = _class.instanceMethodId(
    r'setTextClassifier',
    r'(Landroid/view/textclassifier/TextClassifier;)V',
  );

  static final _setTextClassifier = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setTextClassifier(android.view.textclassifier.TextClassifier textClassifier)`
  void setTextClassifier(
    _$jni.JObject textClassifier,
  ) {
    _setTextClassifier(
            reference.pointer,
            _id_setTextClassifier as _$jni.JMethodIDPtr,
            textClassifier.reference.pointer)
        .check();
  }

  static final _id_getTextClassifier = _class.instanceMethodId(
    r'getTextClassifier',
    r'()Landroid/view/textclassifier/TextClassifier;',
  );

  static final _getTextClassifier = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.view.textclassifier.TextClassifier getTextClassifier()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getTextClassifier() {
    return _getTextClassifier(
            reference.pointer, _id_getTextClassifier as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getWebViewClassLoader = _class.staticMethodId(
    r'getWebViewClassLoader',
    r'()Ljava/lang/ClassLoader;',
  );

  static final _getWebViewClassLoader = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public java.lang.ClassLoader getWebViewClassLoader()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getWebViewClassLoader() {
    return _getWebViewClassLoader(_class.reference.pointer,
            _id_getWebViewClassLoader as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getWebViewLooper = _class.instanceMethodId(
    r'getWebViewLooper',
    r'()Landroid/os/Looper;',
  );

  static final _getWebViewLooper = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.os.Looper getWebViewLooper()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getWebViewLooper() {
    return _getWebViewLooper(
            reference.pointer, _id_getWebViewLooper as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_setLayoutParams = _class.instanceMethodId(
    r'setLayoutParams',
    r'(Landroid/view/ViewGroup$LayoutParams;)V',
  );

  static final _setLayoutParams = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setLayoutParams(android.view.ViewGroup$LayoutParams layoutParams)`
  void setLayoutParams(
    _$jni.JObject layoutParams,
  ) {
    _setLayoutParams(
            reference.pointer,
            _id_setLayoutParams as _$jni.JMethodIDPtr,
            layoutParams.reference.pointer)
        .check();
  }

  static final _id_setOverScrollMode = _class.instanceMethodId(
    r'setOverScrollMode',
    r'(I)V',
  );

  static final _setOverScrollMode = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setOverScrollMode(int i)`
  void setOverScrollMode(
    int i,
  ) {
    _setOverScrollMode(
            reference.pointer, _id_setOverScrollMode as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setScrollBarStyle = _class.instanceMethodId(
    r'setScrollBarStyle',
    r'(I)V',
  );

  static final _setScrollBarStyle = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setScrollBarStyle(int i)`
  void setScrollBarStyle(
    int i,
  ) {
    _setScrollBarStyle(
            reference.pointer, _id_setScrollBarStyle as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_computeScroll = _class.instanceMethodId(
    r'computeScroll',
    r'()V',
  );

  static final _computeScroll = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void computeScroll()`
  void computeScroll() {
    _computeScroll(reference.pointer, _id_computeScroll as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_onHoverEvent = _class.instanceMethodId(
    r'onHoverEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onHoverEvent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onHoverEvent(android.view.MotionEvent motionEvent)`
  bool onHoverEvent(
    _$jni.JObject motionEvent,
  ) {
    return _onHoverEvent(
            reference.pointer,
            _id_onHoverEvent as _$jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onTouchEvent = _class.instanceMethodId(
    r'onTouchEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onTouchEvent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onTouchEvent(android.view.MotionEvent motionEvent)`
  bool onTouchEvent(
    _$jni.JObject motionEvent,
  ) {
    return _onTouchEvent(
            reference.pointer,
            _id_onTouchEvent as _$jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onGenericMotionEvent = _class.instanceMethodId(
    r'onGenericMotionEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onGenericMotionEvent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onGenericMotionEvent(android.view.MotionEvent motionEvent)`
  bool onGenericMotionEvent(
    _$jni.JObject motionEvent,
  ) {
    return _onGenericMotionEvent(
            reference.pointer,
            _id_onGenericMotionEvent as _$jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onTrackballEvent = _class.instanceMethodId(
    r'onTrackballEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onTrackballEvent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onTrackballEvent(android.view.MotionEvent motionEvent)`
  bool onTrackballEvent(
    _$jni.JObject motionEvent,
  ) {
    return _onTrackballEvent(
            reference.pointer,
            _id_onTrackballEvent as _$jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onKeyDown = _class.instanceMethodId(
    r'onKeyDown',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyDown = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onKeyDown(int i, android.view.KeyEvent keyEvent)`
  bool onKeyDown(
    int i,
    _$jni.JObject keyEvent,
  ) {
    return _onKeyDown(reference.pointer, _id_onKeyDown as _$jni.JMethodIDPtr, i,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onKeyUp = _class.instanceMethodId(
    r'onKeyUp',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyUp = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onKeyUp(int i, android.view.KeyEvent keyEvent)`
  bool onKeyUp(
    int i,
    _$jni.JObject keyEvent,
  ) {
    return _onKeyUp(reference.pointer, _id_onKeyUp as _$jni.JMethodIDPtr, i,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onKeyMultiple = _class.instanceMethodId(
    r'onKeyMultiple',
    r'(IILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyMultiple = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onKeyMultiple(int i, int i1, android.view.KeyEvent keyEvent)`
  bool onKeyMultiple(
    int i,
    int i1,
    _$jni.JObject keyEvent,
  ) {
    return _onKeyMultiple(
            reference.pointer,
            _id_onKeyMultiple as _$jni.JMethodIDPtr,
            i,
            i1,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_getAccessibilityNodeProvider = _class.instanceMethodId(
    r'getAccessibilityNodeProvider',
    r'()Landroid/view/accessibility/AccessibilityNodeProvider;',
  );

  static final _getAccessibilityNodeProvider =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getAccessibilityNodeProvider() {
    return _getAccessibilityNodeProvider(reference.pointer,
            _id_getAccessibilityNodeProvider as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_shouldDelayChildPressedState = _class.instanceMethodId(
    r'shouldDelayChildPressedState',
    r'()Z',
  );

  static final _shouldDelayChildPressedState =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean shouldDelayChildPressedState()`
  bool shouldDelayChildPressedState() {
    return _shouldDelayChildPressedState(reference.pointer,
            _id_shouldDelayChildPressedState as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getAccessibilityClassName = _class.instanceMethodId(
    r'getAccessibilityClassName',
    r'()Ljava/lang/CharSequence;',
  );

  static final _getAccessibilityClassName = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.CharSequence getAccessibilityClassName()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getAccessibilityClassName() {
    return _getAccessibilityClassName(reference.pointer,
            _id_getAccessibilityClassName as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_onProvideVirtualStructure = _class.instanceMethodId(
    r'onProvideVirtualStructure',
    r'(Landroid/view/ViewStructure;)V',
  );

  static final _onProvideVirtualStructure = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onProvideVirtualStructure(android.view.ViewStructure viewStructure)`
  void onProvideVirtualStructure(
    _$jni.JObject viewStructure,
  ) {
    _onProvideVirtualStructure(
            reference.pointer,
            _id_onProvideVirtualStructure as _$jni.JMethodIDPtr,
            viewStructure.reference.pointer)
        .check();
  }

  static final _id_onProvideAutofillVirtualStructure = _class.instanceMethodId(
    r'onProvideAutofillVirtualStructure',
    r'(Landroid/view/ViewStructure;I)V',
  );

  static final _onProvideAutofillVirtualStructure =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void onProvideAutofillVirtualStructure(android.view.ViewStructure viewStructure, int i)`
  void onProvideAutofillVirtualStructure(
    _$jni.JObject viewStructure,
    int i,
  ) {
    _onProvideAutofillVirtualStructure(
            reference.pointer,
            _id_onProvideAutofillVirtualStructure as _$jni.JMethodIDPtr,
            viewStructure.reference.pointer,
            i)
        .check();
  }

  static final _id_onProvideContentCaptureStructure = _class.instanceMethodId(
    r'onProvideContentCaptureStructure',
    r'(Landroid/view/ViewStructure;I)V',
  );

  static final _onProvideContentCaptureStructure =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void onProvideContentCaptureStructure(android.view.ViewStructure viewStructure, int i)`
  void onProvideContentCaptureStructure(
    _$jni.JObject viewStructure,
    int i,
  ) {
    _onProvideContentCaptureStructure(
            reference.pointer,
            _id_onProvideContentCaptureStructure as _$jni.JMethodIDPtr,
            viewStructure.reference.pointer,
            i)
        .check();
  }

  static final _id_autofill = _class.instanceMethodId(
    r'autofill',
    r'(Landroid/util/SparseArray;)V',
  );

  static final _autofill = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void autofill(android.util.SparseArray sparseArray)`
  void autofill(
    _$jni.JObject sparseArray,
  ) {
    _autofill(reference.pointer, _id_autofill as _$jni.JMethodIDPtr,
            sparseArray.reference.pointer)
        .check();
  }

  static final _id_isVisibleToUserForAutofill = _class.instanceMethodId(
    r'isVisibleToUserForAutofill',
    r'(I)Z',
  );

  static final _isVisibleToUserForAutofill =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public boolean isVisibleToUserForAutofill(int i)`
  bool isVisibleToUserForAutofill(
    int i,
  ) {
    return _isVisibleToUserForAutofill(reference.pointer,
            _id_isVisibleToUserForAutofill as _$jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_onCreateVirtualViewTranslationRequests =
      _class.instanceMethodId(
    r'onCreateVirtualViewTranslationRequests',
    r'([J[ILjava/util/function/Consumer;)V',
  );

  static final _onCreateVirtualViewTranslationRequests =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onCreateVirtualViewTranslationRequests(java.lang.Object[] js, java.lang.Object[] is, java.util.function.Consumer consumer)`
  void onCreateVirtualViewTranslationRequests(
    _$jni.JArray<_$jni.jlong> js,
    _$jni.JArray<_$jni.jint> is$,
    _$jni.JObject consumer,
  ) {
    _onCreateVirtualViewTranslationRequests(
            reference.pointer,
            _id_onCreateVirtualViewTranslationRequests as _$jni.JMethodIDPtr,
            js.reference.pointer,
            is$.reference.pointer,
            consumer.reference.pointer)
        .check();
  }

  static final _id_dispatchCreateViewTranslationRequest =
      _class.instanceMethodId(
    r'dispatchCreateViewTranslationRequest',
    r'(Ljava/util/Map;[ILandroid/view/translation/TranslationCapability;Ljava/util/List;)V',
  );

  static final _dispatchCreateViewTranslationRequest =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void dispatchCreateViewTranslationRequest(java.util.Map map, java.lang.Object[] is, android.view.translation.TranslationCapability translationCapability, java.util.List list)`
  void dispatchCreateViewTranslationRequest(
    _$jni.JMap<_$jni.JObject, _$jni.JArray<_$jni.jlong>> map,
    _$jni.JArray<_$jni.jint> is$,
    _$jni.JObject translationCapability,
    _$jni.JList<_$jni.JObject> list,
  ) {
    _dispatchCreateViewTranslationRequest(
            reference.pointer,
            _id_dispatchCreateViewTranslationRequest as _$jni.JMethodIDPtr,
            map.reference.pointer,
            is$.reference.pointer,
            translationCapability.reference.pointer,
            list.reference.pointer)
        .check();
  }

  static final _id_onVirtualViewTranslationResponses = _class.instanceMethodId(
    r'onVirtualViewTranslationResponses',
    r'(Landroid/util/LongSparseArray;)V',
  );

  static final _onVirtualViewTranslationResponses =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onVirtualViewTranslationResponses(android.util.LongSparseArray longSparseArray)`
  void onVirtualViewTranslationResponses(
    _$jni.JObject longSparseArray,
  ) {
    _onVirtualViewTranslationResponses(
            reference.pointer,
            _id_onVirtualViewTranslationResponses as _$jni.JMethodIDPtr,
            longSparseArray.reference.pointer)
        .check();
  }

  static final _id_performLongClick = _class.instanceMethodId(
    r'performLongClick',
    r'()Z',
  );

  static final _performLongClick = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean performLongClick()`
  bool performLongClick() {
    return _performLongClick(
            reference.pointer, _id_performLongClick as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_onCreateInputConnection = _class.instanceMethodId(
    r'onCreateInputConnection',
    r'(Landroid/view/inputmethod/EditorInfo;)Landroid/view/inputmethod/InputConnection;',
  );

  static final _onCreateInputConnection = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo editorInfo)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject onCreateInputConnection(
    _$jni.JObject editorInfo,
  ) {
    return _onCreateInputConnection(
            reference.pointer,
            _id_onCreateInputConnection as _$jni.JMethodIDPtr,
            editorInfo.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_onDragEvent = _class.instanceMethodId(
    r'onDragEvent',
    r'(Landroid/view/DragEvent;)Z',
  );

  static final _onDragEvent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onDragEvent(android.view.DragEvent dragEvent)`
  bool onDragEvent(
    _$jni.JObject dragEvent,
  ) {
    return _onDragEvent(reference.pointer,
            _id_onDragEvent as _$jni.JMethodIDPtr, dragEvent.reference.pointer)
        .boolean;
  }

  static final _id_onWindowFocusChanged = _class.instanceMethodId(
    r'onWindowFocusChanged',
    r'(Z)V',
  );

  static final _onWindowFocusChanged = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void onWindowFocusChanged(boolean z)`
  void onWindowFocusChanged(
    bool z,
  ) {
    _onWindowFocusChanged(reference.pointer,
            _id_onWindowFocusChanged as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_dispatchKeyEvent = _class.instanceMethodId(
    r'dispatchKeyEvent',
    r'(Landroid/view/KeyEvent;)Z',
  );

  static final _dispatchKeyEvent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean dispatchKeyEvent(android.view.KeyEvent keyEvent)`
  bool dispatchKeyEvent(
    _$jni.JObject keyEvent,
  ) {
    return _dispatchKeyEvent(
            reference.pointer,
            _id_dispatchKeyEvent as _$jni.JMethodIDPtr,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_requestFocus = _class.instanceMethodId(
    r'requestFocus',
    r'(ILandroid/graphics/Rect;)Z',
  );

  static final _requestFocus = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean requestFocus(int i, android.graphics.Rect rect)`
  bool requestFocus(
    int i,
    _$jni.JObject rect,
  ) {
    return _requestFocus(reference.pointer,
            _id_requestFocus as _$jni.JMethodIDPtr, i, rect.reference.pointer)
        .boolean;
  }

  static final _id_requestChildRectangleOnScreen = _class.instanceMethodId(
    r'requestChildRectangleOnScreen',
    r'(Landroid/view/View;Landroid/graphics/Rect;Z)Z',
  );

  static final _requestChildRectangleOnScreen =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32
                          )>)>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  int)>();

  /// from: `public boolean requestChildRectangleOnScreen(android.view.View view, android.graphics.Rect rect, boolean z)`
  bool requestChildRectangleOnScreen(
    _$jni.JObject view,
    _$jni.JObject rect,
    bool z,
  ) {
    return _requestChildRectangleOnScreen(
            reference.pointer,
            _id_requestChildRectangleOnScreen as _$jni.JMethodIDPtr,
            view.reference.pointer,
            rect.reference.pointer,
            z ? 1 : 0)
        .boolean;
  }

  static final _id_setBackgroundColor = _class.instanceMethodId(
    r'setBackgroundColor',
    r'(I)V',
  );

  static final _setBackgroundColor = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setBackgroundColor(int i)`
  void setBackgroundColor(
    int i,
  ) {
    _setBackgroundColor(
            reference.pointer, _id_setBackgroundColor as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setLayerType = _class.instanceMethodId(
    r'setLayerType',
    r'(ILandroid/graphics/Paint;)V',
  );

  static final _setLayerType = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setLayerType(int i, android.graphics.Paint paint)`
  void setLayerType(
    int i,
    _$jni.JObject paint,
  ) {
    _setLayerType(reference.pointer, _id_setLayerType as _$jni.JMethodIDPtr, i,
            paint.reference.pointer)
        .check();
  }

  static final _id_onStartTemporaryDetach = _class.instanceMethodId(
    r'onStartTemporaryDetach',
    r'()V',
  );

  static final _onStartTemporaryDetach = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onStartTemporaryDetach()`
  void onStartTemporaryDetach() {
    _onStartTemporaryDetach(
            reference.pointer, _id_onStartTemporaryDetach as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_onFinishTemporaryDetach = _class.instanceMethodId(
    r'onFinishTemporaryDetach',
    r'()V',
  );

  static final _onFinishTemporaryDetach = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onFinishTemporaryDetach()`
  void onFinishTemporaryDetach() {
    _onFinishTemporaryDetach(reference.pointer,
            _id_onFinishTemporaryDetach as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_getHandler = _class.instanceMethodId(
    r'getHandler',
    r'()Landroid/os/Handler;',
  );

  static final _getHandler = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.os.Handler getHandler()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getHandler() {
    return _getHandler(reference.pointer, _id_getHandler as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_findFocus = _class.instanceMethodId(
    r'findFocus',
    r'()Landroid/view/View;',
  );

  static final _findFocus = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.view.View findFocus()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject findFocus() {
    return _findFocus(reference.pointer, _id_findFocus as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getCurrentWebViewPackage = _class.staticMethodId(
    r'getCurrentWebViewPackage',
    r'()Landroid/content/pm/PackageInfo;',
  );

  static final _getCurrentWebViewPackage = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public android.content.pm.PackageInfo getCurrentWebViewPackage()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getCurrentWebViewPackage() {
    return _getCurrentWebViewPackage(_class.reference.pointer,
            _id_getCurrentWebViewPackage as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_onCheckIsTextEditor = _class.instanceMethodId(
    r'onCheckIsTextEditor',
    r'()Z',
  );

  static final _onCheckIsTextEditor = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean onCheckIsTextEditor()`
  bool onCheckIsTextEditor() {
    return _onCheckIsTextEditor(
            reference.pointer, _id_onCheckIsTextEditor as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_onApplyWindowInsets = _class.instanceMethodId(
    r'onApplyWindowInsets',
    r'(Landroid/view/WindowInsets;)Landroid/view/WindowInsets;',
  );

  static final _onApplyWindowInsets = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets windowInsets)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject onApplyWindowInsets(
    _$jni.JObject windowInsets,
  ) {
    return _onApplyWindowInsets(
            reference.pointer,
            _id_onApplyWindowInsets as _$jni.JMethodIDPtr,
            windowInsets.reference.pointer)
        .object(const _$jni.JObjectType());
  }
}

final class $WebView$Type extends _$jni.JObjType<WebView> {
  @_$jni.internal
  const $WebView$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/webkit/WebView;';

  @_$jni.internal
  @_$core.override
  WebView fromReference(_$jni.JReference reference) =>
      WebView.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebView$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebView$Type) && other is $WebView$Type;
  }
}
